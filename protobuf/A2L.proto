syntax = "proto3";

import "protobuf/A2ML.proto";
import "protobuf/IF_DATA.proto";
import "protobuf/shared.proto";

option go_package = "./../pkg/a2l";

message AddrTypeType {
  string Value = 1 [json_name = "Value"];
}

message DataTypeType {
  string Value = 1 [json_name = "Value"];
}

message IndexOrderType {
  string Value = 1 [json_name = "Value"];
}

message A2MLType {
  repeated declaration Declaration = 1 [json_name = "Declaration"];
}

message A2MLVersionType {
  IntType VersionNo = 1 [json_name = "VersionNo"];
  IntType UpgradeNo = 2 [json_name = "UpgradeNo"];
}

message AddrEpkType {
  LongType Address = 1 [json_name = "Address"];
}

message AlignmentByteType {
  IntType AlignmentBorder = 1 [json_name = "AlignmentBorder"];
}

message AlignmentFloat32IeeeType {
  IntType AlignmentBorder = 1 [json_name = "AlignmentBorder"];
}

message AlignmentFloat64IeeeType {
  IntType AlignmentBorder = 1 [json_name = "AlignmentBorder"];
}

message AlignmentLongType {
  IntType AlignmentBorder = 1 [json_name = "AlignmentBorder"];
}

message AlignmentWordType {
  IntType AlignmentBorder = 1 [json_name = "AlignmentBorder"];
}

message AnnotationLabelType {
  StringType Label = 1 [json_name = "Label"];
}

message AnnotationOriginType {
  StringType Origin = 1 [json_name = "Origin"];
}

message AnnotationTextType {
  repeated StringType AnnotationText = 1 [json_name = "AnnotationText"];
}

message AnnotationType {
  optional AnnotationLabelType ANNOTATION_LABEL = 1 [json_name = "ANNOTATION_LABEL"];
  optional AnnotationOriginType ANNOTATION_ORIGIN = 2 [json_name = "ANNOTATION_ORIGIN"];
  optional AnnotationTextType ANNOTATION_TEXT = 3 [json_name = "ANNOTATION_TEXT"];
}

message ArraySizeType {
  IntType Number = 1 [json_name = "Number"];
}

message ASAP2VersionType {
  IntType VersionNo = 1 [json_name = "VersionNo"];
  IntType UpgradeNo = 2 [json_name = "UpgradeNo"];
}

message AxisDescrType {
  string Attribute = 1 [json_name = "Attribute"];
  IdentType InputQuantity = 2 [json_name = "InputQuantity"];
  IdentType Conversion = 3 [json_name = "Conversion"];
  IntType MaxAxisPoints = 4 [json_name = "MaxAxisPoints"];
  FloatType LowerLimit = 5 [json_name = "LowerLimit"];
  FloatType UpperLimit = 6 [json_name = "UpperLimit"];
  optional ReadOnlyType READ_ONLY = 7 [json_name = "READ_ONLY"];
  optional FormatType FORMAT = 8 [json_name = "FORMAT"];
  repeated AnnotationType ANNOTATION = 9 [json_name = "ANNOTATION"];
  optional AxisPtsRefType AXIS_PTS_REF = 10 [json_name = "AXIS_PTS_REF"];
  optional MaxGradType MAX_GRAD = 11 [json_name = "MAX_GRAD"];
  optional MonotonyType MONOTONY = 12 [json_name = "MONOTONY"];
  optional ByteOrderType BYTE_ORDER = 13 [json_name = "BYTE_ORDER"];
  optional ExtendedLimitsType EXTENDED_LIMITS = 14 [json_name = "EXTENDED_LIMITS"];
  optional FixAxisParType FIX_AXIS_PAR = 15 [json_name = "FIX_AXIS_PAR"];
  optional FixAxisParDistType FIX_AXIS_PAR_DIST = 16 [json_name = "FIX_AXIS_PAR_DIST"];
  optional FixAxisParListType FIX_AXIS_PAR_LIST = 17 [json_name = "FIX_AXIS_PAR_LIST"];
  optional DepositType DEPOSIT = 18 [json_name = "DEPOSIT"];
  optional CurveAxisRefType CURVE_AXIS_REF = 19 [json_name = "CURVE_AXIS_REF"];
  optional StepSizeType STEP_SIZE = 20 [json_name = "STEP_SIZE"];
  optional PhysUnitType PHYS_UNIT = 21 [json_name = "PHYS_UNIT"];
}

message AxisPtsRefType {
  IdentType AxisPoints = 1 [json_name = "AxisPoints"];
}

message AxisPtsType {
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  LongType Address = 3 [json_name = "Address"];
  IdentType InputQuantity = 4 [json_name = "InputQuantity"];
  IdentType DepositR = 5 [json_name = "DepositR"];
  FloatType MaxDiff = 6 [json_name = "MaxDiff"];
  IdentType Conversion = 7 [json_name = "Conversion"];
  IntType MaxAxisPoints = 8 [json_name = "MaxAxisPoints"];
  FloatType LowerLimit = 9 [json_name = "LowerLimit"];
  FloatType UpperLimit = 10 [json_name = "UpperLimit"];
  optional DisplayIdentifierType DISPLAY_IDENTIFIER = 11 [json_name = "DISPLAY_IDENTIFIER"];
  optional ReadOnlyType READ_ONLY = 12 [json_name = "READ_ONLY"];
  optional FormatType FORMAT = 13 [json_name = "FORMAT"];
  optional DepositType DEPOSIT = 14 [json_name = "DEPOSIT"];
  optional ByteOrderType BYTE_ORDER = 15 [json_name = "BYTE_ORDER"];
  optional FunctionListType FUNCTION_LIST = 16 [json_name = "FUNCTION_LIST"];
  optional RefMemorySegmentType REF_MEMORY_SEGMENT = 17 [json_name = "REF_MEMORY_SEGMENT"];
  optional GuardRailsType GUARD_RAILS = 18 [json_name = "GUARD_RAILS"];
  optional ExtendedLimitsType EXTENDED_LIMITS = 19 [json_name = "EXTENDED_LIMITS"];
  repeated AnnotationType ANNOTATION = 20 [json_name = "ANNOTATION"];
  repeated IfDataType IF_DATA = 21 [json_name = "IF_DATA"];
  optional CalibrationAccessType CALIBRATION_ACCESS = 22 [json_name = "CALIBRATION_ACCESS"];
  optional EcuAddressExtensionType ECU_ADDRESS_EXTENSION = 23 [json_name = "ECU_ADDRESS_EXTENSION"];
  optional PhysUnitType PHYS_UNIT = 24 [json_name = "PHYS_UNIT"];
  optional StepSizeType STEP_SIZE = 25 [json_name = "STEP_SIZE"];
  optional SymbolLinkType SYMBOL_LINK = 26 [json_name = "SYMBOL_LINK"];
  optional MonotonyType MONOTONY = 27 [json_name = "MONOTONY"];
}

message AxisPtsXType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
  IndexOrderType IndexIncr = 3 [json_name = "IndexIncr"];
  AddrTypeType Addressing = 4 [json_name = "Addressing"];
}

message AxisPtsYType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
  IndexOrderType IndexIncr = 3 [json_name = "IndexIncr"];
  AddrTypeType Addressing = 4 [json_name = "Addressing"];
}

message AxisPtsZType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
  IndexOrderType IndexIncr = 3 [json_name = "IndexIncr"];
  AddrTypeType Addressing = 4 [json_name = "Addressing"];
}

message AxisRescaleXType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
  IntType MaxNumberOfRescalePairs = 3 [json_name = "MaxNumberOfRescalePairs"];
  IndexOrderType IndexIncr = 4 [json_name = "IndexIncr"];
  AddrTypeType Addressing = 5 [json_name = "Addressing"];
}

message AxisRescaleYType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
  IntType MaxNumberOfRescalePairs = 3 [json_name = "MaxNumberOfRescalePairs"];
  IndexOrderType IndexIncr = 4 [json_name = "IndexIncr"];
  AddrTypeType Addressing = 5 [json_name = "Addressing"];
}

message AxisRescaleZType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
  IntType MaxNumberOfRescalePairs = 3 [json_name = "MaxNumberOfRescalePairs"];
  IndexOrderType IndexIncr = 4 [json_name = "IndexIncr"];
  AddrTypeType Addressing = 5 [json_name = "Addressing"];
}

message BitOperationType {
  optional LeftShiftType LEFT_SHIFT = 1 [json_name = "LEFT_SHIFT"];
  optional RightShiftType RIGHT_SHIFT = 2 [json_name = "RIGHT_SHIFT"];
  optional SignExtendType SIGN_EXTEND = 3 [json_name = "SIGN_EXTEND"];
}

message BitMaskType {
  LongType Mask = 1 [json_name = "Mask"];
}

message ByteOrderType {
  string ByteOrder = 1 [json_name = "ByteOrder"];
}

message CalibrationAccessType {
  string Type = 1 [json_name = "Type"];
}

message CalibrationHandleType {
  repeated LongType Handle = 1 [json_name = "Handle"];
}

message CalibrationMethodType {
  StringType Method = 1 [json_name = "Method"];
  LongType Version = 2 [json_name = "Version"];
  repeated CalibrationHandleType CALIBRATION_HANDLE = 3 [json_name = "CALIBRATION_HANDLE"];
}

message CharacteristicType {
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  string Type = 3 [json_name = "Type"];
  LongType Address = 4 [json_name = "Address"];
  IdentType Deposit = 5 [json_name = "Deposit"];
  FloatType MaxDiff = 6 [json_name = "MaxDiff"];
  IdentType Conversion = 7 [json_name = "Conversion"];
  FloatType LowerLimit = 8 [json_name = "LowerLimit"];
  FloatType UpperLimit = 9 [json_name = "UpperLimit"];
  optional DisplayIdentifierType DISPLAY_IDENTIFIER = 10 [json_name = "DISPLAY_IDENTIFIER"];
  optional FormatType FORMAT = 11 [json_name = "FORMAT"];
  optional ByteOrderType BYTE_ORDER = 12 [json_name = "BYTE_ORDER"];
  optional BitMaskType BIT_MASK = 13 [json_name = "BIT_MASK"];
  optional FunctionListType FUNCTION_LIST = 14 [json_name = "FUNCTION_LIST"];
  optional NumberType NUMBER = 15 [json_name = "NUMBER"];
  optional ExtendedLimitsType EXTENDED_LIMITS = 16 [json_name = "EXTENDED_LIMITS"];
  optional ReadOnlyType READ_ONLY = 17 [json_name = "READ_ONLY"];
  optional GuardRailsType GUARD_RAILS = 18 [json_name = "GUARD_RAILS"];
  optional MapListType MAP_LIST = 19 [json_name = "MAP_LIST"];
  optional MaxRefreshType MAX_REFRESH = 20 [json_name = "MAX_REFRESH"];
  optional DependentCharacteristicType DEPENDENT_CHARACTERISTIC = 21 [json_name = "DEPENDENT_CHARACTERISTIC"];
  optional VirtualCharacteristicType VIRTUAL_CHARACTERISTIC = 22 [json_name = "VIRTUAL_CHARACTERISTIC"];
  optional RefMemorySegmentType REF_MEMORY_SEGMENT = 23 [json_name = "REF_MEMORY_SEGMENT"];
  repeated AnnotationType ANNOTATION = 24 [json_name = "ANNOTATION"];
  optional ComparisonQuantityType COMPARISON_QUANTITY = 25 [json_name = "COMPARISON_QUANTITY"];
  repeated IfDataType IF_DATA = 26 [json_name = "IF_DATA"];
  repeated AxisDescrType AXIS_DESCR = 27 [json_name = "AXIS_DESCR"];
  optional CalibrationAccessType CALIBRATION_ACCESS = 28 [json_name = "CALIBRATION_ACCESS"];
  optional MatrixDimType MATRIX_DIM = 29 [json_name = "MATRIX_DIM"];
  optional EcuAddressExtensionType ECU_ADDRESS_EXTENSION = 30 [json_name = "ECU_ADDRESS_EXTENSION"];
  optional DiscreteType DISCRETE = 31 [json_name = "DISCRETE"];
  optional SymbolLinkType SYMBOL_LINK = 32 [json_name = "SYMBOL_LINK"];
  optional StepSizeType STEP_SIZE = 33 [json_name = "STEP_SIZE"];
  optional PhysUnitType PHYS_UNIT = 34 [json_name = "PHYS_UNIT"];
}

message CoeffsType {
  FloatType A = 1 [json_name = "A"];
  FloatType B = 2 [json_name = "B"];
  FloatType C = 3 [json_name = "C"];
  FloatType D = 4 [json_name = "D"];
  FloatType E = 5 [json_name = "E"];
  FloatType F = 6 [json_name = "F"];
}

message CoeffsLinearType {
  FloatType A = 1 [json_name = "A"];
  FloatType B = 2 [json_name = "B"];
}

message ComparisonQuantityType {
  IdentType Name = 1 [json_name = "Name"];
}

message CompuMethodType {
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  string ConversionType = 3 [json_name = "ConversionType"];
  StringType Format = 4 [json_name = "Format"];
  StringType Unit = 5 [json_name = "Unit"];
  optional FormulaType FORMULA = 6 [json_name = "FORMULA"];
  optional CoeffsType COEFFS = 7 [json_name = "COEFFS"];
  optional CoeffsLinearType COEFFS_LINEAR = 8 [json_name = "COEFFS_LINEAR"];
  optional CompuTabRefType COMPU_TAB_REF = 9 [json_name = "COMPU_TAB_REF"];
  optional RefUnitType REF_UNIT = 10 [json_name = "REF_UNIT"];
}

message CompuTabRefType {
  IdentType ConversionTable = 1 [json_name = "ConversionTable"];
}

message CompuTabType {
  message InValOutValType {
    FloatType InVal = 1 [json_name = "InVal"];
    FloatType OutVal = 2 [json_name = "OutVal"];
  }
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  string ConversionType = 3 [json_name = "ConversionType"];
  IntType NumberValuePairs = 4 [json_name = "NumberValuePairs"];
  repeated InValOutValType InValOutVal = 5 [json_name = "InValOutVal"];
  optional DefaultValueType DEFAULT_VALUE = 6 [json_name = "DEFAULT_VALUE"];
}

message CompuVTabRangeType {
  message InValMinInValMaxOutValType {
    FloatType InValMin = 1 [json_name = "InValMin"];
    FloatType InValMax = 2 [json_name = "InValMax"];
    StringType OutVal = 3 [json_name = "OutVal"];
  }
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  IntType NumberOfValuesTriples = 3 [json_name = "NumberOfValuesTriples"];
  repeated InValMinInValMaxOutValType InValMinInValMaxOutVal = 4 [json_name = "InValMinInValMaxOutVal"];
  optional DefaultValueType DEFAULT_VALUE = 5 [json_name = "DEFAULT_VALUE"];
}

message CompuVTabType {
  message InValOutValType {
    FloatType InVal = 1 [json_name = "InVal"];
    StringType OutVal = 2 [json_name = "OutVal"];
  }
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  string ConversionType = 3 [json_name = "ConversionType"];
  IntType NumberValuePairs = 4 [json_name = "NumberValuePairs"];
  repeated InValOutValType InValOutVal = 5 [json_name = "InValOutVal"];
  optional DefaultValueType DEFAULT_VALUE = 6 [json_name = "DEFAULT_VALUE"];
}

message CpuTypeType {
  StringType Cpu = 1 [json_name = "Cpu"];
}

message CurveAxisRefType {
  IdentType CurveAxis = 1 [json_name = "CurveAxis"];
}

message CustomerNoType {
  StringType Number = 1 [json_name = "Number"];
}

message CustomerType {
  StringType Customer = 1 [json_name = "Customer"];
}

message DataSizeType {
  IntType Size = 1 [json_name = "Value"];
}

message DefaultValueType {
  StringType DisplayString = 1 [json_name = "DisplayString"];
}

message DefCharacteristicType {
  repeated IdentType Identifier = 1 [json_name = "Identifier"];
}

message DependentCharacteristicType {
  StringType Formula = 1 [json_name = "Formula"];
  repeated IdentType Characteristic = 2 [json_name = "Characteristic"];
}

message DepositType {
  string Mode = 1 [json_name = "Mode"];
}

message DiscreteType {
  bool Present = 1;
}

message DisplayIdentifierType {
  IdentType DisplayName = 1 [json_name = "DisplayName"];
}

message DistOpXType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message DistOpYType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message DistOpZType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message EcuAddressExtensionType {
  IntType Extension = 1 [json_name = "Extension"];
}

message EcuAddressType {
  LongType Address = 1 [json_name = "Address"];
}

message EcuCalibrationOffsetType {
  LongType Offset = 1 [json_name = "Offset"];
}

message EcuType {
  StringType ControlUnit = 1 [json_name = "ControlUnit"];
}

message EpkType {
  StringType Identifier = 1 [json_name = "Identifier"];
}

message ErrorMaskType {
  LongType Mask = 1 [json_name = "Mask"];
}

message ExtendedLimitsType {
  FloatType LowerLimit = 1 [json_name = "LowerLimit"];
  FloatType UpperLimit = 2 [json_name = "UpperLimit"];
}

message FixAxisParDistType {
  IntType Offset = 1 [json_name = "Offset"];
  IntType Distance = 2 [json_name = "Distance"];
  IntType Numberapo = 3 [json_name = "Numberapo"];
}

message FixAxisParListType {
  repeated FloatType AxisPtsValue = 1 [json_name = "AxisPtsValue"];
}

message FixAxisParType {
  IntType Offset = 1 [json_name = "Offset"];
  IntType Shift = 2 [json_name = "Shift"];
  IntType Numberapo = 3 [json_name = "Numberapo"];
}

message FixNoAxisPtsXType {
  IntType NumberOfAxisPoints = 1 [json_name = "NumberOfAxisPoints"];
}

message FixNoAxisPtsYType {
  IntType NumberOfAxisPoints = 1 [json_name = "NumberOfAxisPoints"];
}

message FixNoAxisPtsZType {
  IntType NumberOfAxisPoints = 1 [json_name = "NumberOfAxisPoints"];
}

message FncValuesType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
  string IndexMode = 3 [json_name = "IndexMode"];
  AddrTypeType AddressType = 4 [json_name = "AddressType"];
}

message FormatType {
  StringType FormatString = 1 [json_name = "FormatString"];
}

message FormulaInvType {
  StringType GX = 1 [json_name = "GX"];
}

message FormulaType {
  StringType FX = 1 [json_name = "FX"];
  optional FormulaInvType FORMULA_INV = 2 [json_name = "FORMULA_INV"];
}

message FrameMeasurementType {
  repeated IdentType Identifier = 1 [json_name = "Identifier"];
}

message FrameType {
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  IntType ScalingUnit = 3 [json_name = "ScalingUnit"];
  LongType Rate = 4 [json_name = "Rate"];
  optional FrameMeasurementType FRAME_MEASUREMENT = 5 [json_name = "FRAME_MEASUREMENT"];
  repeated IfDataType IF_DATA = 6 [json_name = "IF_DATA"];
}

message FunctionListType {
  repeated IdentType Name = 1 [json_name = "Name"];
}

message FunctionType {
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  repeated AnnotationType ANNOTATION = 3 [json_name = "ANNOTATION"];
  optional DefCharacteristicType DEF_CHARACTERISTIC = 4 [json_name = "DEF_CHARACTERISTIC"];
  optional RefCharacteristicType REF_CHARACTERISTIC = 5 [json_name = "REF_CHARACTERISTIC"];
  optional InMeasurementType IN_MEASUREMENT = 6 [json_name = "IN_MEASUREMENT"];
  optional OutMeasurementType OUT_MEASUREMENT = 7 [json_name = "OUT_MEASUREMENT"];
  optional LocMeasurementType LOC_MEASUREMENT = 8 [json_name = "LOC_MEASUREMENT"];
  optional SubFunctionType SUB_FUNCTION = 9 [json_name = "SUB_FUNCTION"];
  optional FunctionVersionType FUNCTION_VERSION = 10 [json_name = "FUNCTION_VERSION"];
}

message FunctionVersionType {
  StringType VersionIdentifier = 1 [json_name = "VersionIdentifier"];
}

message GroupType {
  IdentType GroupName = 1 [json_name = "GroupName"];
  StringType GroupLongIdentifier = 2 [json_name = "GroupLongIdentifier"];
  repeated AnnotationType ANNOTATION = 3 [json_name = "ANNOTATION"];
  optional RootType ROOT = 4 [json_name = "ROOT"];
  optional RefCharacteristicType REF_CHARACTERISTIC = 5 [json_name = "REF_CHARACTERISTIC"];
  optional RefMeasurementType REF_MEASUREMENT = 6 [json_name = "REF_MEASUREMENT"];
  optional FunctionListType FUNCTION_LIST = 7 [json_name = "FUNCTION_LIST"];
  optional SubGroupType SUB_GROUP = 8 [json_name = "SUB_GROUP"];
}

message GuardRailsType {
  bool Present = 1;
}

message HeaderType {
  StringType Comment = 1 [json_name = "Comment"];
  optional VersionType VERSION = 2 [json_name = "VERSION"];
  optional ProjectNoType PROJECT_NO = 3 [json_name = "PROJECT_NO"];
}

message IdentificationType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message InMeasurementType {
  repeated IdentType Identifier = 1 [json_name = "Identifier"];
}

message LayoutType {
  string IndexMode = 1 [json_name = "IndexMode"];
}

message LeftShiftType {
  LongType BitCount = 1 [json_name = "BitCount"];
}

message LocMeasurementType {
  repeated IdentType Identifier = 1 [json_name = "Identifier"];
}

message MapListType {
  repeated IdentType Name = 1 [json_name = "Name"];
}

message MatrixDimType {
  IntType XDim = 1 [json_name = "XDim"];
  IntType YDim = 2 [json_name = "YDim"];
  IntType ZDim = 3 [json_name = "ZDim"];
}

message MaxGradType {
  FloatType MaxGradient = 1 [json_name = "MaxGradient"];
}

message MaxRefreshType {
  IntType ScalingUnit = 1 [json_name = "ScalingUnit"];
  LongType Rate = 2 [json_name = "Rate"];
}

message MeasurementType {
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  DataTypeType DataType = 3 [json_name = "DataType"];
  IdentType Conversion = 4 [json_name = "Conversion"];
  IntType Resolution = 5 [json_name = "Resolution"];
  FloatType Accuracy = 6 [json_name = "Accuracy"];
  FloatType LowerLimit = 7 [json_name = "LowerLimit"];
  FloatType UpperLimit = 8 [json_name = "UpperLimit"];
  optional DisplayIdentifierType DISPLAY_IDENTIFIER = 9 [json_name = "DISPLAY_IDENTIFIER"];
  optional ReadWriteType READ_WRITE = 10 [json_name = "READ_WRITE"];
  optional FormatType FORMAT = 11 [json_name = "FORMAT"];
  optional ArraySizeType ARRAY_SIZE = 12 [json_name = "ARRAY_SIZE"];
  optional BitMaskType BIT_MASK = 13 [json_name = "BIT_MASK"];
  optional BitOperationType BIT_OPERATION = 14 [json_name = "BIT_OPERATION"];
  optional ByteOrderType BYTE_ORDER = 15 [json_name = "BYTE_ORDER"];
  optional MaxRefreshType MAX_REFRESH = 16 [json_name = "MAX_REFRESH"];
  optional VirtualType VIRTUAL = 17 [json_name = "VIRTUAL"];
  optional FunctionListType FUNCTION_LIST = 18 [json_name = "FUNCTION_LIST"];
  optional EcuAddressType ECU_ADDRESS = 19 [json_name = "ECU_ADDRESS"];
  optional ErrorMaskType ERROR_MASK = 20 [json_name = "ERROR_MASK"];
  optional RefMemorySegmentType REF_MEMORY_SEGMENT = 21 [json_name = "REF_MEMORY_SEGMENT"];
  repeated AnnotationType ANNOTATION = 22 [json_name = "ANNOTATION"];
  repeated IfDataType IF_DATA = 23 [json_name = "IF_DATA"];
  optional MatrixDimType MATRIX_DIM = 24 [json_name = "MATRIX_DIM"];
  optional EcuAddressExtensionType ECU_ADDRESS_EXTENSION = 25 [json_name = "ECU_ADDRESS_EXTENSION"];
  optional DiscreteType DISCRETE = 26 [json_name = "DISCRETE"];
  optional SymbolLinkType SYMBOL_LINK = 27 [json_name = "SYMBOL_LINK"];
  optional LayoutType LAYOUT = 28 [json_name = "LAYOUT"];
  optional PhysUnitType PHYS_UNIT = 29 [json_name = "PHYS_UNIT"];
}

message MemoryLayoutType {
  string PrgType = 1 [json_name = "PrgType"];
  LongType Address = 2 [json_name = "Address"];
  LongType Size = 3 [json_name = "Size"];
  repeated LongType Offset = 4 [json_name = "Offset"];
  repeated IfDataType IF_DATA = 5 [json_name = "IF_DATA"];
}

message MemorySegmentType {
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  string PrgType = 3 [json_name = "PrgType"];
  string MemoryType = 4 [json_name = "MemoryType"];
  string Attribute = 5 [json_name = "Attribute"];
  LongType Address = 6 [json_name = "Address"];
  LongType Size = 7 [json_name = "Size"];
  repeated LongType Offset = 8 [json_name = "Offset"];
  repeated IfDataType IF_DATA = 9 [json_name = "IF_DATA"];
}

message ModCommonType {
  StringType Comment = 1 [json_name = "Comment"];
  optional SRecLayoutType S_REC_LAYOUT = 2 [json_name = "S_REC_LAYOUT"];
  optional DepositType DEPOSIT = 3 [json_name = "DEPOSIT"];
  optional ByteOrderType BYTE_ORDER = 4 [json_name = "BYTE_ORDER"];
  optional DataSizeType DATA_SIZE = 5 [json_name = "DATA_SIZE"];
  optional AlignmentByteType ALIGNMENT_BYTE = 6 [json_name = "ALIGNMENT_BYTE"];
  optional AlignmentWordType ALIGNMENT_WORD = 7 [json_name = "ALIGNMENT_WORD"];
  optional AlignmentLongType ALIGNMENT_LONG = 8 [json_name = "ALIGNMENT_LONG"];
  optional AlignmentFloat32IeeeType ALIGNMENT_FLOAT32_IEEE = 9 [json_name = "ALIGNMENT_FLOAT32_IEEE"];
  optional AlignmentFloat64IeeeType ALIGNMENT_FLOAT64_IEEE = 10 [json_name = "ALIGNMENT_FLOAT64_IEEE"];
}

message ModParType {
  StringType Comment = 1 [json_name = "Comment"];
  optional VersionType VERSION = 2 [json_name = "VERSION"];
  repeated AddrEpkType ADDR_EPK = 3 [json_name = "ADDR_EPK"];
  optional EpkType EPK = 4 [json_name = "EPK"];
  optional SupplierType SUPPLIER = 5 [json_name = "SUPPLIER"];
  optional CustomerType CUSTOMER = 6 [json_name = "CUSTOMER"];
  optional CustomerNoType CUSTOMER_NO = 7 [json_name = "CUSTOMER_NO"];
  optional UserType USER = 8 [json_name = "USER"];
  optional PhoneNoType PHONE_NO = 9 [json_name = "PHONE_NO"];
  optional EcuType ECU = 10 [json_name = "ECU"];
  optional CpuTypeType CPU_TYPE = 11 [json_name = "CPU_TYPE"];
  optional NoOfInterfacesType NO_OF_INTERFACES = 12 [json_name = "NO_OF_INTERFACES"];
  optional EcuCalibrationOffsetType ECU_CALIBRATION_OFFSET = 13 [json_name = "ECU_CALIBRATION_OFFSET"];
  repeated CalibrationMethodType CALIBRATION_METHOD = 14 [json_name = "CALIBRATION_METHOD"];
  repeated MemoryLayoutType MEMORY_LAYOUT = 15 [json_name = "MEMORY_LAYOUT"];
  repeated MemorySegmentType MEMORY_SEGMENT = 16 [json_name = "MEMORY_SEGMENT"];
  repeated SystemConstantType SYSTEM_CONSTANT = 17 [json_name = "SYSTEM_CONSTANT"];
}

message ModuleType {
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  optional A2MLType A2ML = 3 [json_name = "A2ML"];
  optional ModParType MOD_PAR = 4 [json_name = "MOD_PAR"];
  optional ModCommonType MOD_COMMON = 5 [json_name = "MOD_COMMON"];
  repeated IfDataType IF_DATA = 6 [json_name = "IF_DATA"];
  repeated CharacteristicType CHARACTERISTIC = 7 [json_name = "CHARACTERISTIC"];
  repeated AxisPtsType AXIS_PTS = 8 [json_name = "AXIS_PTS"];
  repeated MeasurementType MEASUREMENT = 9 [json_name = "MEASUREMENT"];
  repeated CompuMethodType COMPU_METHOD = 10 [json_name = "COMPU_METHOD"];
  repeated CompuTabType COMPU_TAB = 11 [json_name = "COMPU_TAB"];
  repeated CompuVTabType COMPU_VTAB = 12 [json_name = "COMPU_VTAB"];
  repeated CompuVTabRangeType COMPU_VTAB_RANGE = 13 [json_name = "COMPU_VTAB_RANGE"];
  repeated FunctionType FUNCTION = 14 [json_name = "FUNCTION"];
  repeated GroupType GROUP = 15 [json_name = "GROUP"];
  repeated RecordLayoutType RECORD_LAYOUT = 16 [json_name = "RECORD_LAYOUT"];
  optional VariantCodingType VARIANT_CODING = 17 [json_name = "VARIANT_CODING"];
  optional FrameType FRAME = 18 [json_name = "FRAME"];
  repeated UserRightsType USER_RIGHTS = 19 [json_name = "USER_RIGHTS"];
  repeated UnitType UNIT = 20 [json_name = "UNIT"];
}

message MonotonyType {
  string Monotony = 1 [json_name = "Monotony"];
}

message NoAxisPtsXType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message NoAxisPtsYType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message NoAxisPtsZType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message NoOfInterfacesType {
  IntType Num = 1 [json_name = "Num"];
}

message NoRescaleXType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message NoRescaleYType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message NoRescaleZType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message NumberType {
  IntType Number = 1 [json_name = "Number"];
}

message OffsetXType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message OffsetYType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message OffsetZType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message OutMeasurementType {
  repeated IdentType Identifier = 1 [json_name = "Identifier"];
}

message PhoneNoType {
  StringType TelNum = 1 [json_name = "TelNum"];
}

message PhysUnitType {
  StringType Unit = 1 [json_name = "Unit"];
}

message ProjectNoType {
  IdentType ProjectNumber = 1 [json_name = "ProjectNumber"];
}

message ProjectType {
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  HeaderType HEADER = 3 [json_name = "HEADER"];
  repeated ModuleType MODULE = 4 [json_name = "MODULE"];
}

message ReadOnlyType {
  bool Present = 1;
}

message ReadWriteType {
  bool Present = 1;
}

message RecordLayoutType {
  IdentType Name = 1 [json_name = "Name"];
  optional FncValuesType FNC_VALUES = 2 [json_name = "FNC_VALUES"];
  optional IdentificationType IDENTIFICATION = 3 [json_name = "IDENTIFICATION"];
  optional AxisPtsXType AXIS_PTS_X = 4 [json_name = "AXIS_PTS_X"];
  optional AxisPtsYType AXIS_PTS_Y = 5 [json_name = "AXIS_PTS_Y"];
  optional AxisPtsZType AXIS_PTS_Z = 6 [json_name = "AXIS_PTS_Z"];
  optional AxisRescaleXType AXIS_RESCALE_X = 7 [json_name = "AXIS_RESCALE_X"];
  optional AxisRescaleYType AXIS_RESCALE_Y = 8 [json_name = "AXIS_RESCALE_Y"];
  optional AxisRescaleZType AXIS_RESCALE_Z = 9 [json_name = "AXIS_RESCALE_Z"];
  optional NoAxisPtsXType NO_AXIS_PTS_X = 10 [json_name = "NO_AXIS_PTS_X"];
  optional NoAxisPtsYType NO_AXIS_PTS_Y = 11 [json_name = "NO_AXIS_PTS_Y"];
  optional NoAxisPtsZType NO_AXIS_PTS_Z = 12 [json_name = "NO_AXIS_PTS_Z"];
  optional NoRescaleXType NO_RESCALE_X = 13 [json_name = "NO_RESCALE_X"];
  optional NoRescaleYType NO_RESCALE_Y = 14 [json_name = "NO_RESCALE_Y"];
  optional NoRescaleZType NO_RESCALE_Z = 15 [json_name = "NO_RESCALE_Z"];
  optional FixNoAxisPtsXType FIX_NO_AXIS_PTS_X = 16 [json_name = "FIX_NO_AXIS_PTS_X"];
  optional FixNoAxisPtsYType FIX_NO_AXIS_PTS_Y = 17 [json_name = "FIX_NO_AXIS_PTS_Y"];
  optional FixNoAxisPtsZType FIX_NO_AXIS_PTS_Z = 18 [json_name = "FIX_NO_AXIS_PTS_Z"];
  optional SrcAddrXType SRC_ADDR_X = 19 [json_name = "SRC_ADDR_X"];
  optional SrcAddrYType SRC_ADDR_Y = 20 [json_name = "SRC_ADDR_Y"];
  optional SrcAddrZType SRC_ADDR_Z = 21 [json_name = "SRC_ADDR_Z"];
  optional RipAddrXType RIP_ADDR_X = 22 [json_name = "RIP_ADDR_X"];
  optional RipAddrYType RIP_ADDR_Y = 23 [json_name = "RIP_ADDR_Y"];
  optional RipAddrZType RIP_ADDR_Z = 24 [json_name = "RIP_ADDR_Z"];
  optional RipAddrWType RIP_ADDR_W = 25 [json_name = "RIP_ADDR_W"];
  optional ShiftOpXType SHIFT_OP_X = 26 [json_name = "SHIFT_OP_X"];
  optional ShiftOpYType SHIFT_OP_Y = 27 [json_name = "SHIFT_OP_Y"];
  optional ShiftOpZType SHIFT_OP_Z = 28 [json_name = "SHIFT_OP_Z"];
  optional OffsetXType OFFSET_X = 29 [json_name = "OFFSET_X"];
  optional OffsetYType OFFSET_Y = 30 [json_name = "OFFSET_Y"];
  optional OffsetZType OFFSET_Z = 31 [json_name = "OFFSET_Z"];
  optional DistOpXType DIST_OP_X = 32 [json_name = "DIST_OP_X"];
  optional DistOpYType DIST_OP_Y = 33 [json_name = "DIST_OP_Y"];
  optional DistOpZType DIST_OP_Z = 34 [json_name = "DIST_OP_Z"];
  optional AlignmentByteType ALIGNMENT_BYTE = 35 [json_name = "ALIGNMENT_BYTE"];
  optional AlignmentWordType ALIGNMENT_WORD = 36 [json_name = "ALIGNMENT_WORD"];
  optional AlignmentLongType ALIGNMENT_LONG = 37 [json_name = "ALIGNMENT_LONG"];
  optional AlignmentFloat32IeeeType ALIGNMENT_FLOAT32_IEEE = 38 [json_name = "ALIGNMENT_FLOAT32_IEEE"];
  optional AlignmentFloat64IeeeType ALIGNMENT_FLOAT64_IEEE = 39 [json_name = "ALIGNMENT_FLOAT64_IEEE"];
  repeated ReservedType RESERVED = 40 [json_name = "RESERVED"];
}

message RefCharacteristicType {
  repeated IdentType Identifier = 1 [json_name = "Identifier"];
}

message RefGroupType {
  repeated IdentType Identifier = 1 [json_name = "Identifier"];
}

message RefMeasurementType {
  repeated IdentType Identifier = 1 [json_name = "Identifier"];
}

message RefMemorySegmentType {
  IdentType Name = 1 [json_name = "Name"];
}

message RefUnitType {
  IdentType Unit = 1 [json_name = "Unit"];
}

message ReservedType {
  IntType Position = 1 [json_name = "Position"];
  string DataSize = 2 [json_name = "DataSize"];
}

message RightShiftType {
  LongType BitCount = 1 [json_name = "BitCount"];
}

message RipAddrWType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message RipAddrXType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message RipAddrYType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message RipAddrZType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message RootNodeType {
  ASAP2VersionType ASAP2_VERSION = 1 [json_name = "ASAP2_VERSION"];
  A2MLVersionType A2ML_VERSION = 2 [json_name = "A2ML_VERSION"];
  ProjectType PROJECT = 3 [json_name = "PROJECT"];
}

message RootType {
  bool Present = 1;
}

message ShiftOpXType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message ShiftOpYType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message ShiftOpZType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message SiExponentsType {
  IntType Length = 1 [json_name = "Length"];
  IntType Mass = 2 [json_name = "Mass"];
  IntType Time = 3 [json_name = "Time"];
  IntType ElectricCurrent = 4 [json_name = "ElectricCurrent"];
  IntType Temperature = 5 [json_name = "Temperature"];
  IntType AmountOfSubstance = 6 [json_name = "AmountOfSubstance"];
  IntType LuminousIntensity = 7 [json_name = "LuminousIntensity"];
}

message SignExtendType {
  bool Present = 1;
}

message SrcAddrXType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message SrcAddrYType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message SrcAddrZType {
  IntType Position = 1 [json_name = "Position"];
  DataTypeType DataType = 2 [json_name = "DataType"];
}

message SRecLayoutType {
  IdentType Name = 1 [json_name = "Name"];
}

message StepSizeType {
  FloatType StepSize = 1 [json_name = "StepSize"];
}

message SubFunctionType {
  repeated IdentType Identifier = 1 [json_name = "Identifier"];
}

message SubGroupType {
  repeated IdentType Identifier = 1 [json_name = "Identifier"];
}

message SupplierType {
  StringType Manufacturer = 1 [json_name = "Manufacturer"];
}

message SymbolLinkType {
  StringType SymbolName = 1 [json_name = "SymbolName"];
  LongType Offset = 2 [json_name = "Offset"];
}

message SystemConstantType {
  StringType Name = 1 [json_name = "Name"];
  StringType Value = 2 [json_name = "Value"];
}

message UnitConversionType {
  FloatType Gradient = 1 [json_name = "Gradient"];
  FloatType Offset = 2 [json_name = "Offset"];
}

message UnitType {
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  StringType Display = 3 [json_name = "Display"];
  string Type = 4 [json_name = "Type"];
  optional SiExponentsType SI_EXPONENTS = 5 [json_name = "SI_EXPONENTS"];
  optional RefUnitType REF_UNIT = 6 [json_name = "REF_UNIT"];
  optional UnitConversionType UNIT_CONVERSION = 7 [json_name = "UNIT_CONVERSION"];
}

message UserRightsType {
  IdentType UserLevelId = 1 [json_name = "UserLevelId"];
  repeated RefGroupType REF_GROUP = 2 [json_name = "REF_GROUP"];
  optional ReadOnlyType READ_ONLY = 3 [json_name = "READ_ONLY"];
}

message UserType {
  StringType UserName = 1 [json_name = "UserName"];
}

message VarAddressType {
  repeated LongType Address = 1 [json_name = "Address"];
}

message VarCharacteristicType {
  IdentType Name = 1 [json_name = "Name"];
  repeated IdentType CriterionName = 2 [json_name = "CriterionName"];
  optional VarAddressType VAR_ADDRESS = 3 [json_name = "VAR_ADDRESS"];
}

message VarCriterionType {
  IdentType Name = 1 [json_name = "Name"];
  StringType LongIdentifier = 2 [json_name = "LongIdentifier"];
  repeated IdentType Value = 3 [json_name = "Value"];
  optional VarMeasurementType VAR_MEASUREMENT = 4 [json_name = "VAR_MEASUREMENT"];
  optional VarSelectionCharacteristicType VAR_SELECTION_CHARACTERISTIC = 5 [json_name = "VAR_SELECTION_CHARACTERISTIC"];
}

message VarForbiddenCombType {
  message CriterionType {
    IdentType CriterionName = 1 [json_name = "CriterionName"];
    IdentType CriterionValue = 2 [json_name = "CriterionValue"];
  }
  repeated CriterionType CriterionNameCriterionValue = 1 [json_name = "CriterionNameCriterionValue"];
}

message VariantCodingType {
  optional VarSeparatorType VAR_SEPARATOR = 1 [json_name = "VAR_SEPARATOR"];
  optional VarNamingType VAR_NAMING = 2 [json_name = "VAR_NAMING"];
  repeated VarCriterionType VAR_CRITERION = 3 [json_name = "VAR_CRITERION"];
  repeated VarForbiddenCombType VAR_FORBIDDEN_COMB = 4 [json_name = "VAR_FORBIDDEN_COMB"];
  repeated VarCharacteristicType VAR_CHARACTERISTIC = 5 [json_name = "VAR_CHARACTERISTIC"];
}

message VarMeasurementType {
  IdentType Name = 1 [json_name = "Name"];
}

message VarNamingType {
  string Tag = 1 [json_name = "Tag"];
}

message VarSelectionCharacteristicType {
  IdentType Name = 1 [json_name = "Name"];
}

message VarSeparatorType {
  StringType Separator = 1 [json_name = "Separator"];
}

message VersionType {
  StringType VersionIdentifier = 1 [json_name = "VersionIdentifier"];
}

message VirtualCharacteristicType {
  StringType Formula = 1 [json_name = "Formula"];
  repeated IdentType Characteristic = 2 [json_name = "Characteristic"];
}

message VirtualType {
  repeated IdentType MeasuringChannel = 1 [json_name = "MeasuringChannel"];
}
